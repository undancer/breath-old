buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.0'
    }
}

allprojects {

    group = 'com.github.undancer'
    version = '1.0-SNAPSHOT'

    apply plugin: 'maven'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    ext {
        metricsVersion = '3.0.1'
        groovyVersion = '2.1.8'
        gparsVersion = '1.1.0'
        springVersion = '3.2.4.RELEASE'
        tomcatVersion = '7.0.47'
        slf4jVersion = '1.7.5'
        logbackVersion = '1.0.3'
        junitVersion = '4.11'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "http://maven.oschina.net/content/groups/public" }
//        maven { url "https://repository.apache.org/content/repositories/releases" }  // tomcat 8 RC3
    }
}

subprojects {

    apply plugin: 'propdeps'
    apply plugin: 'groovy'
    apply plugin: 'scala'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    dependencies {
        compile "org.codehaus.groovy:groovy-all:$groovyVersion"
        compile "org.codehaus.gpars:gpars:$gparsVersion"

        compile "org.slf4j:slf4j-api:$slf4jVersion"
        compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
        compile "org.slf4j:log4j-over-slf4j:$slf4jVersion"
        compile "ch.qos.logback:logback-classic:$logbackVersion"

        compile 'com.google.guava:guava:15.0'

        testCompile("junit:junit:$junitVersion")
    }
}

project(':breath-gradle-plugin') {

    apply plugin: 'groovy'

    dependencies {
        compile gradleApi()
        compile localGroovy()
    }

    configurations.archives.artifacts.clear()
}

project(':breath-core') {

    dependencies {
        provided "org.apache.tomcat:tomcat-servlet-api:$tomcatVersion"
        provided "org.apache.tomcat:tomcat-jsp-api:$tomcatVersion"

        compile 'javax.inject:javax.inject:1'

        compile(group: 'org.springframework', name: 'spring-context-support', version: "$springVersion") {
            exclude group: 'commons-logging', module: 'commons-logging'
        }

        compile(group: 'org.springframework', name: 'spring-webmvc', version: "$springVersion") {
            exclude group: 'commons-logging', module: 'commons-logging'
        }

        compile 'javax.inject:javax.inject:1'

//        compile 'org.datanucleus:datanucleus-accessplatform-jdo-excel:3.3.2'
//        compile 'org.apache.poi:poi-ooxml:3.+'
//
//        ['metrics-core', 'metrics-servlet'].each {
//            compile "com.codahale.metrics:$it:3.+"
//        }
//        compile(group: 'com.codahale.metrics', name: 'metrics-core', version: '3.+')
//        compile(group: 'com.codahale.metrics', name: 'metrics-logback', version: '3.+')
//        compile(group: 'com.codahale.metrics', name: 'metrics-jersey', version: '3.+')
//        compile(group: 'com.codahale.metrics', name: 'metrics-json', version: '3.+')
//        compile(group: 'com.codahale.metrics', name: 'metrics-servlet', version: '3.+')
//        compile(group: 'com.codahale.metrics', name: 'metrics-healthchecks', version: '3.+')
//        compile(group: 'com.codahale.metrics', name: 'metrics-graphite', version: '3.+')

    }
}

project(':breath-webapp') {

    apply plugin: 'war'
    apply plugin: 'tomcat'
    apply plugin: 'jetty'

    tomcatRun {
        contextPath = '/'
    }

    dependencies {
        providedCompile "org.apache.tomcat:tomcat-servlet-api:$tomcatVersion"
        providedCompile "org.apache.tomcat:tomcat-jsp-api:$tomcatVersion"

        compile(project(':breath-core'))

//        compile(group: 'org.glassfish.jersey.ext', name: 'jersey-spring3', version: '2.3.1') {
//            exclude(group: 'commons-logging', module: 'commons-logging')
//            exclude(group: 'org.glassfish.hk2')
//            exclude(group: 'junit', module: 'junit')
//        }
//
//        ['oauth1-signature', 'oauth1-client', 'oauth1-server', 'oauth2-client'].each {
//            compile "org.glassfish.jersey.security:$it:2.3.1"
//        }
//
//        compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.2.3'
//
//        compile 'org.glassfish.jersey.core:jersey-server:2.3'
//
//        compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.2.3'

        tomcat("org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion") {
            exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
        }
        tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:$tomcatVersion") {
            exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
        }
        tomcat("org.apache.tomcat.embed:tomcat-embed-logging-juli:$tomcatVersion") {
            exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
        }
    }
}